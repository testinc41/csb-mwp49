{"version":3,"sources":["deposit.js","exit.js","rechargePool.js","getMyEth.js","balances.js","index.js"],"names":["Buffer","__webpack_require__","d","__webpack_exports__","makeDeposit","Web3","require","Tx","Transaction","rinkebyABIs","privateKey","process","depositBoxAddress","deposit_box_eth_address","depositBoxABI","deposit_box_eth_abi","web3","deposit","eth","Contract","methods","encodeABI","getTransactionCount","then","nonce","rawTx","chainId","from","toString","data","to","gas","gasPrice","value","utils","toHex","toWei","tx","chain","hardfork","sign","serializedTx","serialize","sendSignedTransaction","on","receipt","console","log","catch","error","exit","ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__","ethereumjs_common__WEBPACK_IMPORTED_MODULE_0___default","n","schainABIs","customCommon","Common","forCustomChain","name","tokenManagerAddress","token_manager_eth_address","tokenManagerABI","token_manager_eth_abi","exitToMain","rawTxExit","txExit","common","serializedTxExit","rechargePool","communityPoolAddress","community_pool_address","communityPoolABI","community_pool_abi","registerMainnetCommunityPool","rechargeUserWallet","rawRechargeUserWallet","txRechargeUserWallet","serializedRechargeUserWallet","getMyEth","rawTxGetMyEth","txGetMyEth","serializedTxGetMyEth","App","react_default","a","createElement","className","type","id","disabled","onClick","getBalances","account","ethERC20Address","eth_erc20_address","ethERC20ABI","eth_erc20_abi","web3Rinkeby","ETHERC20","CommunityPool","getBalance","balance","document","getElementById","fromWei","call","hexToNumberString","numberToHex","balanceOf","setTimeout","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.6ad662e2.chunk.js","sourcesContent":["const Web3 = require(\"web3\");\nconst Tx = require(\"ethereumjs-tx\").Transaction;\n\nexport function makeDeposit() {\n  let rinkebyABIs = require(\"./contracts/rinkeby_ABIs.json\");\n  let privateKey = new Buffer(\n    process.env.REACT_APP_INSECURE_PRIVATE_KEY,\n    \"hex\"\n  );\n  let accountForMainnet = process.env.REACT_APP_INSECURE_ACCOUNT;\n  let accountForSchain = process.env.REACT_APP_INSECURE_ACCOUNT;\n\n  let rinkeby = process.env.REACT_APP_INSECURE_RINKEBY;\n  let schainName = process.env.REACT_APP_INSECURE_CHAIN_NAME;\n  let chainId = process.env.REACT_APP_INSECURE_RINKEBY_CHAIN_ID;\n\n  const depositBoxAddress = rinkebyABIs.deposit_box_eth_address;\n  const depositBoxABI = rinkebyABIs.deposit_box_eth_abi;\n\n  const web3 = new Web3(rinkeby);\n\n  let contract = new web3.eth.Contract(depositBoxABI, depositBoxAddress);\n\n  /*\n   * prepare the smart contract function\n   * deposit(string schainID, address to)\n   */\n  let deposit = contract.methods\n    .deposit(schainName, accountForSchain)\n    .encodeABI();\n\n  //get nonce\n  web3.eth.getTransactionCount(accountForMainnet).then((nonce) => {\n    //create raw transaction\n    const rawTx = {\n      chainId: chainId,\n      from: accountForMainnet,\n      nonce: \"0x\" + nonce.toString(16),\n      data: deposit,\n      to: depositBoxAddress,\n      gas: 6500000,\n      gasPrice: 1000000000,\n      value: web3.utils.toHex(web3.utils.toWei(\"1\", \"ether\"))\n    };\n\n    //sign transaction\n    const tx = new Tx(rawTx, { chain: \"rinkeby\", hardfork: \"petersburg\" });\n    tx.sign(privateKey);\n\n    //serialize transaction\n    const serializedTx = tx.serialize();\n\n    //send signed transaction\n    web3.eth\n      .sendSignedTransaction(\"0x\" + serializedTx.toString(\"hex\"))\n      .on(\"receipt\", (receipt) => {\n        //record receipt to console\n        console.log(receipt);\n      })\n      .catch(console.error);\n  });\n}\n","import Common from \"ethereumjs-common\";\nconst Web3 = require(\"web3\");\nconst Tx = require(\"ethereumjs-tx\").Transaction;\n\nexport function exit() {\n  let schainABIs = require(\"./contracts/schain_ABIs.json\");\n  let privateKey = new Buffer(\n    process.env.REACT_APP_INSECURE_PRIVATE_KEY,\n    \"hex\"\n  );\n  let accountForMainnet = process.env.REACT_APP_INSECURE_ACCOUNT;\n  let accountForSchain = process.env.REACT_APP_INSECURE_ACCOUNT;\n  let schainEndpoint = process.env.REACT_APP_INSECURE_SKALE_CHAIN;\n  let chainId = process.env.REACT_APP_INSECURE_CHAIN_ID;\n\n  const customCommon = Common.forCustomChain(\n    \"mainnet\",\n    {\n      name: \"skale-network\",\n      chainId: chainId\n    },\n    \"istanbul\"\n  );\n\n  const tokenManagerAddress = schainABIs.token_manager_eth_address;\n  const tokenManagerABI = schainABIs.token_manager_eth_abi;\n\n  const web3 = new Web3(schainEndpoint);\n\n  let TokenManager = new web3.eth.Contract(\n    tokenManagerABI,\n    tokenManagerAddress\n  );\n\n  /*\n   * prepare the smart contract function\n   * exitToMain(address to)\n   */\n  let exitToMain = TokenManager.methods\n    .exitToMain(\n      accountForMainnet,\n      web3.utils.toHex(web3.utils.toWei(\"1\", \"ether\"))\n    )\n    .encodeABI();\n\n  //get nonce\n  web3.eth.getTransactionCount(accountForSchain).then((nonce) => {\n    //create raw transaction\n    const rawTxExit = {\n      chainId: chainId,\n      from: accountForSchain,\n      nonce: \"0x\" + nonce.toString(16),\n      data: exitToMain,\n      to: tokenManagerAddress,\n      gasPrice: 100000000000,\n      gas: 8000000,\n      value: 0\n    };\n\n    //sign transaction\n    const txExit = new Tx(rawTxExit, { common: customCommon });\n    txExit.sign(privateKey);\n\n    //serialize transaction\n    const serializedTxExit = txExit.serialize();\n\n    //send signed transaction\n    web3.eth\n      .sendSignedTransaction(\"0x\" + serializedTxExit.toString(\"hex\"))\n      .on(\"receipt\", (receipt) => {\n        //record receipt to console\n        console.log(receipt);\n      })\n      .catch(console.error);\n  });\n}\n","const Web3 = require(\"web3\");\nconst Tx = require(\"ethereumjs-tx\").Transaction;\n\nexport function rechargePool() {\n  let rinkebyABIs = require(\"./contracts/rinkeby_ABIs.json\");\n  let privateKey = new Buffer(\n    process.env.REACT_APP_INSECURE_PRIVATE_KEY,\n    \"hex\"\n  );\n  let accountForMainnet = process.env.REACT_APP_INSECURE_ACCOUNT;\n\n  let rinkeby = process.env.REACT_APP_INSECURE_RINKEBY;\n  let schainName = process.env.REACT_APP_INSECURE_CHAIN_NAME;\n  let chainId = process.env.REACT_APP_INSECURE_RINKEBY_CHAIN_ID;\n\n  const communityPoolAddress = rinkebyABIs.community_pool_address;\n  const communityPoolABI = rinkebyABIs.community_pool_abi;\n\n  const web3 = new Web3(rinkeby);\n\n  let CommunityPool = new web3.eth.Contract(\n    communityPoolABI,\n    communityPoolAddress\n  );\n\n  // User needs skETH\n  // before withdraw, user needs to be registered in communityPool.rechargeuserWallet and pass schain name...\n  // add a value, 1 eth or 0.5 eth\n  // after then can withdraw\n\n  let registerMainnetCommunityPool = CommunityPool.methods\n    .rechargeUserWallet(schainName)\n    .encodeABI();\n\n  web3.eth.getTransactionCount(accountForMainnet).then((nonce) => {\n    //create raw transaction\n    const rawRechargeUserWallet = {\n      chainId: chainId,\n      from: accountForMainnet,\n      nonce: \"0x\" + nonce.toString(16),\n      data: registerMainnetCommunityPool,\n      to: communityPoolAddress,\n      gas: 6500000,\n      gasPrice: 1000000000,\n      value: web3.utils.toHex(web3.utils.toWei(\"0.5\", \"ether\"))\n    };\n\n    //sign transaction\n    const txRechargeUserWallet = new Tx(rawRechargeUserWallet, {\n      chain: \"rinkeby\",\n      hardfork: \"petersburg\"\n    });\n    txRechargeUserWallet.sign(privateKey);\n\n    //serialize transaction\n    const serializedRechargeUserWallet = txRechargeUserWallet.serialize();\n\n    //send signed transaction\n    web3.eth\n      .sendSignedTransaction(\n        \"0x\" + serializedRechargeUserWallet.toString(\"hex\")\n      )\n      .on(\"receipt\", (receipt) => {\n        //record receipt to console\n        console.log(receipt);\n      })\n      .catch(console.error);\n  });\n}\n","const Web3 = require(\"web3\");\nconst Tx = require(\"ethereumjs-tx\").Transaction;\n\nexport function getMyEth() {\n  let rinkebyABIs = require(\"./contracts/rinkeby_ABIs.json\");\n  let privateKey = new Buffer(\n    process.env.REACT_APP_INSECURE_PRIVATE_KEY,\n    \"hex\"\n  );\n  let accountForMainnet = process.env.REACT_APP_INSECURE_ACCOUNT;\n  let accountForSchain = process.env.REACT_APP_INSECURE_ACCOUNT;\n  let rinkeby = process.env.REACT_APP_INSECURE_RINKEBY;\n  let chainId = process.env.REACT_APP_INSECURE_RINKEBY_CHAIN_ID;\n\n  const depositBoxAddress = rinkebyABIs.deposit_box_eth_address;\n\n  const depositBoxABI = rinkebyABIs.deposit_box_eth_abi;\n\n  const web3 = new Web3(rinkeby);\n\n  let DepositBox = new web3.eth.Contract(depositBoxABI, depositBoxAddress);\n\n  /*\n   * prepare the smart contract function\n   * getMyEth()\n   */\n  let getMyEth = DepositBox.methods.getMyEth().encodeABI();\n\n  //get nonce\n  web3.eth.getTransactionCount(accountForSchain).then((nonce) => {\n    //create raw transaction\n    const rawTxGetMyEth = {\n      chainId: chainId,\n      from: accountForMainnet,\n      nonce: \"0x\" + nonce.toString(16),\n      data: getMyEth,\n      to: depositBoxAddress,\n      gas: 6500000,\n      gasPrice: 100000000000\n    };\n\n    //sign transaction\n    const txGetMyEth = new Tx(rawTxGetMyEth, {\n      chain: \"rinkeby\",\n      hardfork: \"petersburg\"\n    });\n    txGetMyEth.sign(privateKey);\n\n    //serialize transaction\n    const serializedTxGetMyEth = txGetMyEth.serialize();\n\n    //send signed transaction\n    web3.eth\n      .sendSignedTransaction(\"0x\" + serializedTxGetMyEth.toString(\"hex\"))\n      .on(\"receipt\", (receipt) => {\n        //record receipt to console\n        console.log(receipt);\n      })\n      .catch(console.error);\n  });\n}\n","const Web3 = require(\"web3\");\n\nexport function getBalances() {\n  let rinkebyABIs = require(\"./contracts/rinkeby_ABIs.json\");\n  let schainABIs = require(\"./contracts/schain_ABIs.json\");\n\n  let account = process.env.REACT_APP_INSECURE_ACCOUNT;\n  let rinkeby = process.env.REACT_APP_INSECURE_RINKEBY;\n  let schainEndpoint = process.env.REACT_APP_INSECURE_SKALE_CHAIN;\n  let schainName = process.env.REACT_APP_INSECURE_CHAIN_NAME;\n\n  const ethERC20Address = schainABIs.eth_erc20_address;\n  const ethERC20ABI = schainABIs.eth_erc20_abi;\n\n  const communityPoolAddress = rinkebyABIs.community_pool_address;\n  const communityPoolABI = rinkebyABIs.community_pool_abi;\n\n  const web3Rinkeby = new Web3(rinkeby);\n  const web3SkaleChain = new Web3(schainEndpoint);\n\n  const ETHERC20 = new web3SkaleChain.eth.Contract(\n    ethERC20ABI,\n    ethERC20Address\n  );\n\n  const CommunityPool = new web3Rinkeby.eth.Contract(\n    communityPoolABI,\n    communityPoolAddress\n  );\n\n  web3Rinkeby.eth.getBalance(account).then((balance) => {\n    document.getElementById(\n      \"rinkeby_balance\"\n    ).value = web3Rinkeby.utils.fromWei(balance, \"ether\");\n  });\n\n  CommunityPool.methods\n    .getBalance(schainName)\n    .call({ from: account })\n    .then((balance) => {\n      if (balance === null) {\n        balance = 0;\n      }\n      balance = web3Rinkeby.utils.hexToNumberString(\n        web3Rinkeby.utils.numberToHex(balance)\n      );\n      document.getElementById(\n        \"community_balance\"\n      ).value = web3Rinkeby.utils.fromWei(balance, \"ether\");\n    });\n\n  ETHERC20.methods\n    .balanceOf(account)\n    .call()\n    .then((balance) => {\n      if (balance === null) {\n        balance = 0;\n      }\n      balance = web3Rinkeby.utils.hexToNumberString(\n        web3Rinkeby.utils.numberToHex(balance)\n      );\n      document.getElementById(\n        \"skale_balance\"\n      ).value = web3Rinkeby.utils.fromWei(balance, \"ether\");\n    });\n\n  setTimeout(function () {\n    getBalances();\n  }, 4000);\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { getBalances } from \"./balances\";\nimport { makeDeposit } from \"./deposit\";\nimport { exit } from \"./exit\";\nimport { rechargePool } from \"./rechargePool\";\nimport { getMyEth } from \"./getMyEth\";\nimport \"./styles.css\";\n\ngetBalances();\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <u>\n        Replace the account and private key in .env <br />\n        with your own wallet information.\n      </u>\n      <h6 className=\"text-left mt-2 pl-5\">Step 1:</h6>\n      <p className=\"text-left ml-5 pl-5\">\n        <b>Deposit:</b> Sends 1 test ETH into a Rinkeby Deposit Box.\n      </p>\n      <h6 className=\"text-left pl-5\">Step 2:</h6>\n      <p className=\"text-left ml-5 pl-5\">\n        <b>Recharge Pool:</b> Sends 0.5 test ETH to Rinkeby Community Pool.\n      </p>\n      <h6 className=\"text-left pl-5\">Step 3:</h6>\n      <p className=\"text-left ml-5 pl-5\">\n        <b>Exit:</b> sends 1 test ETH back to Rinkeby testnet.\n      </p>\n      <h6 className=\"text-left pl-5\">Step 4:</h6>\n      <p className=\"text-left ml-5 pl-5\">\n        <b>GetMyEth:</b> pulls 1 test ETH from Deposit to final destination.\n      </p>\n      <div className=\"row border-top mt-4 pt-4\">\n        <div className=\"col-6 border-right\">\n          <h4 className=\"text-center pt-2\">Rinkeby</h4>\n          <div className=\"dataBox\">\n            <div className=\"row py-3\">\n              <div className=\"col-sm-12 ml-2 text-left\">\n                <div className=\"input-group mb-3\">\n                  <div className=\"input-group-prepend\">\n                    <span>Account Balance: </span>\n                  </div>\n                  <input type=\"text\" id=\"rinkeby_balance\" disabled />\n                </div>\n              </div>\n              <div className=\"col-sm-12 ml-2 text-left\">\n                <div className=\"input-group mb-3\">\n                  <div className=\"input-group-prepend\">\n                    <span>User's Exit Pool: </span>\n                  </div>\n                  <input type=\"text\" id=\"community_balance\" disabled />\n                </div>\n              </div>\n            </div>\n          </div>\n          <button onClick={makeDeposit}>Deposit</button>\n          <button onClick={rechargePool}>RechargePool</button>\n          <button onClick={getMyEth}>GetMyEth</button>\n        </div>\n        <div className=\"col-6\">\n          <h4 className=\"text-center pt-2\">SKALE Chain</h4>\n          <div className=\"dataBox\">\n            <div className=\"row py-3\">\n              <div className=\"col-sm-12 ml-2 text-left\">\n                <div className=\"input-group mb-3\">\n                  <div className=\"input-group-prepend\">\n                    <span>Account Balance: </span>\n                  </div>\n                  <input type=\"text\" id=\"skale_balance\" disabled />\n                </div>\n              </div>\n            </div>\n          </div>\n          <button onClick={exit}>Exit</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}